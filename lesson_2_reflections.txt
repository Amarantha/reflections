What happens when you initialize a repository? Why do you need to do it?

	A new directory called .git is created inside the directory which
	basically turns it into a repository rather than just a folder. It 
	contains data git needs to be able to do its job.

How is the staging area different from the working directory and the repository?

	The staging area only contains the files you want to commit.

What value do you think it offers?

	It gives you more control over what gets commited and what doesn't

How can you use the staging area to make sure you have one commit per logical
change?
	
	You can use git diff and git diff --staged to check what you are about 
	to commit or to see if you need to commit now or not.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	When trying out a new feature, or making an easier version of the game to 
	make debugging easier.  If you have a published version, you might be 
	working on installing new features, but you also find that the current 
	version has a few bugs in it which you want to fix straightaway. Branches
	would enable you to put the new features on hold while you fix the bugs.

How do the diagrams help you visualize the branch structure?

	Well it can get a bit complicated and so having a visual representation
	of the branch structure helps you to make changes where they should be
	and to not lose any changes!  You can see what commits are in what branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	It takes the changes which have been made to both branches and creates a
	new version from those. The diagram shows on which branch each change
	was made so you know which commits refer to which updated part of code.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
